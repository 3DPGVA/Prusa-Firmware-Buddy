#pragma once

#ifdef __cplusplus
    #include <inttypes.h>
    #include "cmsis_os.h"
    #include <cstring>
    #include <array>
    #include <bsod.h>

class Loadcell {
public:
    enum class TareMode {
        Continuous,
        Static,
    };

    Loadcell();

    void Tare(TareMode mode = TareMode::Static);

    void SetScale(float scale);
    float GetScale() const;

    inline void SetThreshold(float threshold, TareMode tareMode) {
        switch (tareMode) {
        case TareMode::Static:
            thresholdStatic = threshold;
            break;
        case TareMode::Continuous:
            thresholdContinous = threshold;
            break;
        default:
            general_error("unreachable", "-");
        }
    }
    inline float GetThreshold(TareMode tareMode) const {
        switch (tareMode) {
        case TareMode::Static:
            return thresholdStatic;
        case TareMode::Continuous:
            return thresholdContinous;
        default:
            general_error("unreachable", "-");
            return 0;
        }
    }

    void SetHysteresis(float hysteresis);
    float GetHysteresis() const;

    void ProcessSample(int32_t loadcellRaw);

    bool GetMinZEndstop() const;
    bool GetMaxZEndstop() const;

    inline void EnableZMaxEndstopOnInactiveZMin() { triggerZmaxOnInactiveZmin = true; }
    inline void DisableZMaxEndstopOnInactiveZMin() { triggerZmaxOnInactiveZmin = false; }

    void ConfigureSignalEvent(osThreadId threadId, int32_t signal);

    // return loadcell load in grams
    inline float GetLoad() const { return (scale * (loadcellRaw - offset)); }
    inline float GetHighPassLoad() const { return highPassFilter.GetOutput() * scale; }

    int32_t GetRawValue() const;

    bool IsSignalConfigured() const;

    inline void EnableHighPrecision(bool wait = true) {
        highPrecision = true;
        if (wait)
            WaitForNextSample();
    }
    inline void DisableHighPrecision() { highPrecision = false; }
    inline bool IsHighPrecisionEnabled() const { return highPrecision; }

    void SetFailsOnLoadAbove(float failsOnLoadAbove);
    float GetFailsOnLoadAbove() const;

    void SetFailsOnLoadBelow(float failsOnLoadBelow);
    float GetFailsOnLoadBelow() const;

    class IFailureEnforcer {
    protected:
        Loadcell &lcell;
        float oldErrThreshold;
        IFailureEnforcer(Loadcell &lcell, float oldErrThreshold);
        IFailureEnforcer(const IFailureEnforcer &) = delete;
        IFailureEnforcer(IFailureEnforcer &&) = default;
    };

    class FailureOnLoadAboveEnforcer : public IFailureEnforcer {
    public:
        FailureOnLoadAboveEnforcer(Loadcell &lcell, float grams);
        FailureOnLoadAboveEnforcer(FailureOnLoadAboveEnforcer &&) = default;
        ~FailureOnLoadAboveEnforcer();
    };

    class FailureOnLoadBelowEnforcer : public IFailureEnforcer {
    public:
        FailureOnLoadBelowEnforcer(Loadcell &lcell, float grams);
        FailureOnLoadBelowEnforcer(FailureOnLoadBelowEnforcer &&) = default;
        ~FailureOnLoadBelowEnforcer();
    };

    FailureOnLoadAboveEnforcer CreateLoadAboveErrEnforcer(float grams = 500);

    FailureOnLoadBelowEnforcer CreateLoadBelowErrEnforcer(float grams = -3000);

private:
    /// Implements Butterworth filter of 1st order for sample rate 76 Hz and corner freq. at 5 Hz
    ///
    /// Based on C implementation generated by mkfilter/mkshape/gencode   A.J. Fisher
    /// Command line: mkfilter -Bu -Hp -o 1 -a 4.8684210526e-01 0.0000000000e+00 -l
    class HighPassFilter {
    public:
        HighPassFilter() {
            Reset();
        }

        inline void Reset() {
            std::memset(&xv, 0, sizeof(xv));
            std::memset(&yv, 0, sizeof(xv));
        }

        inline float Filter(float input) {
            xv[0] = xv[1];
            xv[1] = input / GAIN;
            yv[0] = yv[1];
            yv[1] = (xv[1] - xv[0]) + (0.6533326075f * yv[0]);
            return yv[1];
        }

        inline float GetOutput() const { return yv[1]; }

        /// How many samples it approximatelly takes for the filter to settle down.
        inline int GetSettlingTime() const { return 40; }

    private:
        static constexpr int NZEROS = 1;
        static constexpr int NPOLES = 1;
        static constexpr float GAIN = 1.209677950e+00f;

        float xv[NZEROS + 1];
        float yv[NPOLES + 1];
    };

    bool triggerZmaxOnInactiveZmin;
    float scale;
    float thresholdStatic;
    float thresholdContinous;
    float hysteresis;
    float failsOnLoadAbove;
    float failsOnLoadBelow;
    osThreadId threadId;
    int32_t signal;
    int32_t loadcellRaw;
    bool endstop;
    bool isSignalEventConfigured;
    bool highPrecision;

    TareMode tareMode;
    // used when tareMode == Static
    int32_t offset;
    // used when tareMode == Continuous
    HighPassFilter highPassFilter;

    int32_t WaitForNextSample();
};

    #define EXTERN_C extern "C"
extern Loadcell loadcell;

#else
    #define EXTERN_C
#endif

#include <stdbool.h>

EXTERN_C bool loadcell_get_min_z_endstop();
EXTERN_C bool loadcell_get_max_z_endstop();
